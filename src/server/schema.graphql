type VoteResult {
  userId: ID!
  vote: String!
}

type VoidResult {
  success: Boolean!
}

type User {
  id: ID!
  name: String!
  connectionStatus: ConnectionStatus!
}

type Session {
  id: ID!
  users: [User]
  results: [VoteResult]
  state: SessionState
}

enum SessionState {
  WAITING
  VOTING
}

enum ConnectionStatus {
  DISCONNECTED
  CONNECTED
}

type Query {
  session(sessionId: String!): Session
}

type Mutation {
  createSession: String
  join(name: String!, sessionId: String!): SessionState
  leave(sessionId: String!): VoidResult
  vote(vote: String!, sessionId: String!): VoidResult
  startVoting(sessionId: String!): VoidResult
  endRound(sessionId: String!): VoidResult
}

type Subscription {
  sessionStateChanged(sessionId: String!): SessionState
  personJoined(sessionId: String!): [User]
  personDisconnected(sessionId: String!): [User]
  voteCast(sessionId: String!): [User]
  connectionStatusChanged(sessionId: String!): User
}